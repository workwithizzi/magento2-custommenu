<?php
/**
 * A Magento 2 module named Izzi/CustomMenu
 *
 * This file included in Izzi/CustomMenu is licensed under OSL 3.0
 *
 * http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 * Please see LICENSE.txt for the full text of the OSL 3.0 license
 */
?>

<?php
$_htmlId = $block->getHtmlId() ? $block->getHtmlId() : '_' . uniqid();
$_colspan = $block->isAddAfter() ? 2 : 1;

$linkTypeExtraHtmlClass =$block->getLinkTypeExtraHtmlClass();
$pageIdExtraHtmlClass =$block->getPageIdExtraHtmlClass();
$linkUrlExtraHtmlClass = $block->getLinkUrlExtraHtmlClass();
?>

<div class="design_theme_ua_regexp" id="grid<?= $block->escapeHtmlAttr($_htmlId) ?>">
    <div class="admin__control-table-wrapper">
        <table class="admin__control-table" id="<?= $block->escapeHtmlAttr($block->getElement()->getId()) ?>">
            <thead>
            <tr>
                <?php foreach ($block->getColumns() as $columnName => $column): ?>
                    <th><?= $block->escapeHtml($column['label']) ?></th>
                <?php endforeach; ?>
                <th class="col-actions" colspan="<?= (int)$_colspan ?>"><?= $block->escapeHtml(__('Action')) ?></th>
            </tr>
            </thead>
            <tfoot>
            <tr>
                <td colspan="<?= count($block->getColumns())+$_colspan ?>" class="col-actions-add">
                    <button id="addToEndBtn<?= $block->escapeHtmlAttr($_htmlId) ?>" class="action-add" title="<?= $block->escapeHtmlAttr(__('Add')) ?>" type="button">
                        <span><?= $block->escapeHtml($block->getAddButtonLabel()) ?></span>
                    </button>
                </td>
            </tr>
            </tfoot>
            <tbody id="addRow<?= $block->escapeHtmlAttr($_htmlId) ?>"></tbody>
        </table>
    </div>
    <input type="hidden" name="<?= $block->escapeHtmlAttr($block->getElement()->getName()) ?>[__empty]" value="" />

    <script>
        require([
            'mage/template',
            'prototype'
        ], function (mageTemplate) {
        // create row creator
        window.arrayRow<?= $block->escapeJs($_htmlId) ?> = {

            // define row prototypeJS template
            template: mageTemplate(
                    '<tr id="<%- _id %>">'
                    <?php foreach ($block->getColumns() as $columnName => $column): ?>
                        + '<td>'
                        + '<?= $block->escapeJs($block->renderCellTemplate($columnName)) ?>'
                        + '<\/td>'
                    <?php endforeach; ?>

                    <?php if ($block->isAddAfter()): ?>
                        + '<td><button class="action-add" type="button" id="addAfterBtn<%- _id %>"><span>'
                        + '<?= $block->escapeJs($block->escapeHtml(__('Add after'))) ?>'
                        + '<\/span><\/button><\/td>'
                    <?php endif; ?>

                    + '<td class="col-actions"><button '
                    + 'onclick="arrayRow<?= $block->escapeJs($_htmlId) ?>.del(\'<%- _id %>\')" '
                    + 'class="action-delete" type="button">'
                    + '<span><?= $block->escapeJs($block->escapeHtml(__('Delete'))) ?><\/span><\/button><\/td>'
                    + '<\/tr>'
            ),

            add: function(rowData, insertAfterId) {

                // generate default template data
                var templateValues;

                // Prepare template values
                if (rowData) {
                    templateValues = rowData;
                } else {
                    var d = new Date();
                    templateValues = {
                        <?php foreach ($block->getColumns() as $columnName => $column): ?>
                            <?= $block->escapeJs($columnName) ?>: '',
                                'option_extra_attrs': {},
                        <?php endforeach; ?>
                        _id: '_' + d.getTime() + '_' + d.getMilliseconds()
                };
            }

            // Insert new row after specified row or at the bottom
            if (insertAfterId) {
                Element.insert($(insertAfterId), {after: this.template(templateValues)});
            } else {

                Element.insert($('addRow<?= $block->escapeJs($_htmlId) ?>'), {bottom: this.template(templateValues)});
            }

            // Fill controls with data
            if(rowData === false){

                this.activeAndInactiveField();
            }
            if (rowData) {


                var rowInputElementNames = Object.keys(rowData.column_values);
                for (var i = 0; i < rowInputElementNames.length; i++) {
                    if ($(rowInputElementNames[i])) {
                        $(rowInputElementNames[i]).setValue(rowData.column_values[rowInputElementNames[i]]);

                    }


                    if(rowInputElementNames[i].indexOf('position') !== -1){

                        var positionIndexUniqueId = rowInputElementNames[i],
                                uniqueId = positionIndexUniqueId.replace("position", "");

                        if(rowData.column_values[uniqueId+'link_type'] === 1){
                           $(uniqueId+'link_url').disable();
                        }

                        if(rowData.column_values[uniqueId+'link_type'] === 2
                        || rowData.column_values[uniqueId+'link_type'] === 3){

                            var currentTrElement = $(rowInputElementNames[i]).up('tr');

                            var PageDropDownElement = $(currentTrElement).
                                    down('select.<?= $block->escapeHtmlAttr($pageIdExtraHtmlClass) ?>');

                            if(PageDropDownElement !== 'undefined'){
                               PageDropDownElement.disable();
                           }


                        }

                    }

                }
            }

            // Add event for {addAfterBtn} button
            <?php if ($block->isAddAfter()): ?>
            Event.observe('addAfterBtn' + templateValues._id, 'click', this.add.bind(this, false, templateValues._id));
            <?php endif; ?>
            },

            del: function(rowId) {
                $(rowId).remove();
            },
            activeAndInactiveField:function()
            {

                var lastTrElement = $('<?= $block->escapeHtmlAttr($block->getElement()->getId()) ?>').down('tr:last');
                if(lastTrElement !== 'undefined'){
                    var SelectElement = $(lastTrElement).down('select.<?= $block->escapeHtmlAttr($linkTypeExtraHtmlClass) ?>');

                    if($(SelectElement).getValue() == 2 || $(SelectElement).getValue() == 3){
                           var PageDropDownElement = $(lastTrElement).down('select.<?= $block->escapeHtmlAttr($pageIdExtraHtmlClass) ?>'),
                           linkUrlInputField = $(lastTrElement).down('input.<?= $block->escapeHtmlAttr($linkUrlExtraHtmlClass) ?>');

                           if(PageDropDownElement !== 'undefined'){
                               PageDropDownElement.disable();
                           }

                           if(linkUrlInputField !== 'undefined'){
                                linkUrlInputField.enable();
                           }

                    }else{
                           var PageDropDownElement = $(lastTrElement).down('select.<?= $block->escapeHtmlAttr($pageIdExtraHtmlClass) ?>'),
                           linkUrlInputField =  $(lastTrElement).down('input.<?= $block->escapeHtmlAttr($linkUrlExtraHtmlClass) ?>');

                           if(PageDropDownElement !== 'undefined'){
                               PageDropDownElement.enable();
                           }

                           if(linkUrlInputField !== 'undefined'){
                                linkUrlInputField.disable();
                           }

                    }

                }

            }
        }

        // bind add action to "Add" button in last row
        Event.observe('addToEndBtn<?= $block->escapeJs($_htmlId) ?>',
            'click',
            arrayRow<?= $block->escapeJs($_htmlId) ?>.add.bind(
                arrayRow<?= $block->escapeJs($_htmlId) ?>, false, false
            )
        );

        $(document).on('change', '#<?= $block->escapeHtmlAttr($block->getElement()->getId()) ?> .<?= $block->escapeHtmlAttr($linkTypeExtraHtmlClass) ?>', function(event, element) {
            if (element.tagName.toLowerCase() == 'select') {


                if($(element).getValue() == 2 ||  $(element).getValue() == 3 ){
                       var PageDropDownElement = $(element).up('tr').
                               down('select.<?= $block->escapeHtmlAttr($pageIdExtraHtmlClass) ?>'),
                       linkUrlInputField = $(element).up('tr').
                       down('input.<?= $block->escapeHtmlAttr($linkUrlExtraHtmlClass) ?>');

                       if(PageDropDownElement !== 'undefined'){
                           PageDropDownElement.disable();
                       }

                       if(linkUrlInputField !== 'undefined'){
                            linkUrlInputField.enable();
                       }

                }else{
                       var PageDropDownElement = $(element).up('tr').
                               down('select.<?= $block->escapeHtmlAttr($pageIdExtraHtmlClass) ?>'),
                       linkUrlInputField = $(element).up('tr').
                       down('input.<?= $block->escapeHtmlAttr($linkUrlExtraHtmlClass) ?>');

                       if(PageDropDownElement !== 'undefined'){
                           PageDropDownElement.enable();
                       }

                       if(linkUrlInputField !== 'undefined'){
                            linkUrlInputField.disable();
                       }

                }
            }
        });



        // add existing rows
        <?php
        foreach ($block->getArrayRows() as $_rowId => $_row) {
            echo /** @noEscape */ "arrayRow{$block->escapeJs($_htmlId)}.add(" . /** @noEscape */ $_row->toJson() . ");\n";
        }
        ?>

        // Toggle the grid availability, if element is disabled (depending on scope)
        <?php if ($block->getElement()->getDisabled()): ?>
        toggleValueElements({checked: true}, $('grid<?= $block->escapeJs($_htmlId) ?>').parentNode);
        <?php endif; ?>
        });
    </script>
</div>
